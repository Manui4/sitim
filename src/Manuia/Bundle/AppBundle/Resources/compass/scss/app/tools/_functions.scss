// =======================
// Tools/Functions
// Thanks to @sutterlity
// https://github.com/sutter/POPY-Starter-integration-web/blob/master/scss/tools/_fonctions.scss
// =======================

// Convert px to em
@function pxtoem($target, $context){
    @return ($target/$context)+0em;
}

// Convert em to px
@function emtopx($target, $context){
    @return ($target*$context)+0px;
}

@function _color($string) {
    @if type-of($string) == color {
        @return $string;
    }
    $string-lower: to-lower-case($string);
    $list-colors: transparent black silver gray white maroon red purple fuchsia green lime olive yellow navy blue teal aqua aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray green greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen;
    $keywords: ();
    // Filling $keywords with stringified color keywords
    @each $color in $list-colors {
        $keywords: append($keywords, $color + "");
    }
    // Deal with inherit keyword
    @if $string-lower == "inherit" {
        @return unquote($string);
    }
    // Deal with color keywords
    @if index($keywords, $string-lower) {
        @return nth($list-colors, index($keywords, $string-lower));
    }
    // Deal with hexadecimal triplets
    @else if str-slice($string-lower, 1, 1) == '#' {
        @return _from-hex($string);
    }
    // Deal with rgb(a) colors
    @else if str-slice($string-lower, 1, 3) == 'rgb' {
        @return _from-rgb($string);
    }
    // Deal with hsl(a) colors
    @else if str-slice($string-lower, 1, 3) == 'hsl' {
        @return _from-hsl($string);
    }
    // Return string
    @else {
        @return $string;
    }
}

// Cast a stringified number / stringified percentage into number type
// --------------------------------------------------------------------------------
// @param [string] $string: JSON string
// --------------------------------------------------------------------------------
// @return [number] unitless number or percentage

@function _get-color-value($string) {
  $first: str-slice($string, 1, 1);

  // Pad <1 values with a leading 0
  @if $first == '.' {
    $string: '0' + $string;
  }

  $last: str-slice($string, -1, -1);

  @return if(
    $last == '%',
    nth(_json-decode--number(str-slice($string, 1, -2), 2), 2) * 1%,
    nth(_json-decode--number($string, 2), 2)
  );
}

// Convert an hexadecimal number to a decimal number
// --------------------------------------------------------------------------------
// @param [string] $string: hexadecimal value
// --------------------------------------------------------------------------------
// @return [number] decimal number

@function _hex-to-dec($string) {
  $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
  $string: to-lower-case($string);
  $length: str-length($string);

  $dec: 0;
  @for $i from 1 through $length {
    $factor: 1 + (15 * ($length - $i));
    $index: index($hex, str-slice($string, $i, $i));
    $dec: $dec + $factor * ($index - 1);
  }

  @return $dec;
}

// Cast a JSON encoded string into a hexadecimal color
// --------------------------------------------------------------------------------
// @param [string] $string: JSON string
// --------------------------------------------------------------------------------
// @return [color|string] string or hex color depending on the match

@function _from-hex($string) {
  $string-lower: to-lower-case($string);
  $r: "";  $g: ""; $b: "";
  $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
  $length: str-length($string);
  $max: if($length == 4, 1, 2);

  // Check for length accuracy
  @if $length != 4 and $length != 7 {
    @return $string;
  }

  // Loop from the second character (omitting #)
  @for $i from 2 through $length {
    $c: str-slice($string-lower, $i, $i);

    // If wrong character, return
    @if not index($hex, $c) {
      @return $string;
    }

    @if      str-length($r) < $max { $r: $r + $c }
    @else if str-length($g) < $max { $g: $g + $c }
    @else if str-length($b) < $max { $b: $b + $c }
  }

  @if $length == 4 {
    $r: $r + $r;
    $g: $g + $g;
    $b: $b + $b;
  }

  @return rgb(_hex-to-dec($r), _hex-to-dec($g), _hex-to-dec($b));
}

// Cast a JSON encoded string into a hsl(a) color
// --------------------------------------------------------------------------------
// @param [string] $string: JSON string
// --------------------------------------------------------------------------------
// @return [color|string] string or hsl(a) color, depending on the match

@function _from-hsl($string) {
  $frags: ();
  $string-lower: to-lower-case($string);
  $is-alpha: str-slice($string-lower, 4, 4) == 'a';
  $length: str-length($string);
  $start: str-index($string, "(");

  @for $i from $start through $length {
    $token: str-slice($string-lower, $i, $i);
    @if $token == ' ' or $token == "    " {
      // @continue;
    }
    @else if $token == '(' or $token == ',' {
      $frags: append($frags, "");
    }
    @else if $token == ')' {
      @if length($frags) != if($is-alpha, 4, 3) { @return $string; } // Parsing error
      $hue: _get-color-value(nth($frags, 1));
      $saturation: _get-color-value(nth($frags, 2));
      $lightness: _get-color-value(nth($frags, 3));

      @if not $hue or not $saturation or not $lightness {
        @return $string;
      }

      @if $is-alpha {
        @if length($frags) != 4 { @return $string; } // No alpha channel found
        $alpha: _get-color-value(nth($frags, 4));
        @if not $alpha { @return $string; } // Error parsing alpha channel
        @return hsla($hue, $saturation, $lightness, $alpha);
      }

      @return hsl($hue, $saturation, $lightness);
    }
    @else {
      $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);
    }
  }

  @return $string;
}


// Cast a JSON encoded string into a rgb(a) color
// --------------------------------------------------------------------------------
// @param [string] $string: JSON string
// --------------------------------------------------------------------------------
// @return [color|string] string or rgb(a) color depending on the match

@function _from-rgb($string) {
  $string-lower: to-lower-case($string);
  $frags: ();
  $is-alpha: str-slice($string-lower, 4, 4) == 'a';
  $start: str-index($string, "(");
  $length: str-length($string);

  @for $i from $start through $length {
    $token: str-slice($string-lower, $i, $i);
    @if $token == ' ' or $token == "    " {
      // @continue;
    }
    @else if $token == '(' or $token == ',' {
      $frags: append($frags, "");
    }
    @else if $token == ')' {
      @if length($frags) != if($is-alpha, 4, 3) { @return $string; } // Parsing error
      $red: _get-color-value(nth($frags, 1));
      $green: _get-color-value(nth($frags, 2));
      $blue: _get-color-value(nth($frags, 3));

      @if not $red or not $green or not $blue {
        @return $string;
      }

      @if $is-alpha {
        @if length($frags) != 4 { @return $string; } // No alpha channel found
        $alpha: _get-color-value(nth($frags, 4));
        @if not $alpha { @return $string; } // Error parsing alpha channel
        @return rgba($red, $green, $blue, $alpha);
      }

      @return rgb($red, $green, $blue);
    }
    @else {
      $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);
    }
  }

  @return $string;
}
